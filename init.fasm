; Copyright 2011 Christopher Broome

; init will be loaded by loader.fasm

; our loader loads us at physical address 0x8000
START_LINEAR_ADDRESS  = 0x8000
VRAM_LINEAR_ADDRESS   = 0xb8000
VRAM_SEGMENT_ADDRESS  = VRAM_LINEAR_ADDRESS / 16

org 0 ; offset to 0, we will set segments later
use16 ; we are still in real mode here, but we'll switch later

; this should go above any other includes or assembly code
  jmp main   ; jump to the main program

include "include/ports.finc"
include "include/bios/bios_int_vid.finc"
include "include/hw/kb/kb.finc"

; this gets the a20 address line status comparing the word at 0x00000 with the word at 0x100000
; if a20 is enabled, then changing one value does not affect the other
; if a20 is disabled, they are effectively the same address because wrapping occurs
; the status is returned in the carry bit
get_a20_status:
    push ax
    push ds
    push es
    push si
    push di
    xor ax, ax       ; ax = 0
    mov ds, ax       ; ds = 0x0000
    not ax           ; ax = 0xffff
    mov es, ax       ; es = 0xffff
    mov di, 0x0510   ; di = 0x0510
    mov si, 0x0500   ; si = 0x0500
    mov ax, [ds:si]  ; ax = word at 0x0000:0x0500 (0x00000500)
    cmp [es:di], ax  ; Is it the same as the word at 0xFFFF:0x0510 (0x00100500)?
    jne .enabled     ; If they're different, a20 is enabled
    inc word [es:di] ; Change the word at 0xFFFF:0x0510 (0x00100500)
    ;wbinvd          ; Flush caches (normally not necessary, but done just in case) 486+ only
    cmp [ds:si], ax  ; Did incrementing [es:di] change [ds:si]?
                     ; Is the word at 0x0000:0x0500 (0x00000500) changed?
    jne .disabled    ; If so, we are experiencing wrapping, so a20 must be disabled
    dec word [es:di] ; Restore the word at 0xFFFF:0x0510
.enabled:
    clc ; return cf = 0 if enabled
    jmp .finish
.disabled:
    dec word [es:di] ; Restore the word at 0xFFFF:0x0510 and 0x0000:0x0510 (it's the same memory location)
    stc ; return cf = 1 if disabled
.finish:
    pop di
    pop si
    pop es
    pop ds
    pop ax
    ret

fast_enable_a20:
  inportb 0x92
  or al, 2
  outportb 0x92
  ret

bios_enable_a20:
  mov ax, 0x2401 ; enable a20
  int 0x15       ;
  ret

kbd_enable_a20:
        cli
 
        call    kbd_a20_wait_input
        outportb KBD_PORT_OUT_SEND_COMMAND, KBD_CMD_DISABLE_KEYOARD
 
        call    kbd_a20_wait_input
        outportb KBD_PORT_OUT_SEND_COMMAND, KBD_CMD_READ_OUTPUT_PORT
 
        call    kbd_a20_wait_output
        inportb KBD_PORT_IN_READ_INPUT_BUFFER
        push    ax
 
        call    kbd_a20_wait_input
        outportb KBD_PORT_OUT_SEND_COMMAND, KBD_CMD_WRITE_OUTPUT_PORT
 
        call    kbd_a20_wait_input
        pop     ax
        or      al,2
        outportb KBD_PORT_OUT_WRITE_OUTPUT_BUFFER
 
        call    kbd_a20_wait_input
        outportb KBD_PORT_OUT_SEND_COMMAND, KBD_CMD_ENABLE_KEYOARD
 
        call    kbd_a20_wait_input
        sti
        ret
 
kbd_a20_wait_input:
        inportb KBD_PORT_IN_READ_STATUS_REGISTER
        test    al, 00000010b
        jnz     kbd_a20_wait_input
        ret
 
 
kbd_a20_wait_output:
        inportb KBD_PORT_IN_READ_STATUS_REGISTER
        test    al, 00000001b
        jz      kbd_a20_wait_output
        ret

; outputs a null terminated string to the console using the BIOS
; the first parameter is a pointer to the string
bios_puts:
label page_and_color at bp+6
label string_addr at bp+4
  enter 0, 0      ; set up a stack frame
  push bx
  push si
  pushf
  mov ah, 0x0e             ; BIOS function to output a character
  mov bx, [page_and_color] ; 0 page, 7 attribute (normal text color)
  mov si, [string_addr]    ; move the address to si
  cld
.loop:
  lodsb           ; load al with the byte at [ds:si]
                  ; and increment si
  cmp al, 0       ; if al == 0
  je .done        ; goto .done
                  ; else
  int BIOS_INT_VID ; call the BIOS video interrupt to output the character
  jmp .loop       ; loop again
.done:
  popf
  pop si
  pop bx
  leave           ; restore bp
  ret 2           ; pop parameters ourselves

macro bios_puts_color message, color {
  push color
  push message
  call bios_puts
}

macro bios_puts_normal message { bios_puts_color message, 0x0007 }
macro bios_puts_error  message { bios_puts_color message, 0x000c }
macro bios_puts_good   message { bios_puts_color message, 0x000a }

; calculates the linear address of the gdt at runtime and updates the gdt_desc 
; appropriately so that we don't have to depend on compile time constants
; for the gdt_desc.address pointer
install_gdt:
  pusha
  xor eax, eax       ; zero out eax
  mov ax, ds         ; lgdt uses the data segment as its default segment
  shl eax, 4         ; multiply eax by 16
  add eax, gdt_start ; add the offset
  mov dword [gdt_desc.address], eax ; set the gdt_desc's pointer
  mov eax, gdt_end   ;
  sub eax, gdt_start ;
  mov word [gdt_desc.limit], ax
  popa
  lgdt [gdt_desc] ; load the global descriptor table
  ret

; Stage 2 entry point
main:
  cli ; clear interrupts
             ; align all our segments
  mov ax, cs ; set ax = cs
  mov ds, ax ; set ds = cs
  mov es, ax ; set es = cs
  sti

  ; display the loading message
  bios_puts_normal sys_msgs.loading

  ; here we'll try several different methods of enabling A20 in the hopes that one will work
  call get_a20_status  ; gets the a20 line status. cf = 0 if enabled, 1 if disabled
  jc   .a20_routines   ; if carry was set, the line is disabled, so we need to enable it
  bios_puts_normal a20_msgs.enabled_by_default
  jmp  .gdt_load
.a20_routines:
  bios_puts_error a20_msgs.disabled

  bios_puts_normal a20_msgs.trying_fast
  call fast_enable_a20
  call get_a20_status
  jnc .enabled_a20

  bios_puts_normal a20_msgs.trying_bios
  call bios_enable_a20 ; call the bios to enable the a20 line
  call get_a20_status  ; get the status of the a20 line
  jnc .enabled_a20      ; if carry was set, the line is disabled, so we try again

  bios_puts_normal a20_msgs.trying_kbc
  call kbd_enable_a20 ; call the routine to enable the a20 line
  call get_a20_status ; get the status again
  jnc .enabled_a20    ; if carry was set, the line is disabled and we'll fall through and halt

  bios_puts_error a20_msgs.failed_to_enable
  jmp .display_halt_msg
.enabled_a20:
  bios_puts_good a20_msgs.enabled
.gdt_load:
  jmp .gdt
.display_halt_msg:
  bios_puts_error sys_msgs.halting
.halt_os:
  cli
  hlt ; halt the system.
  jmp .halt_os

.gdt:
  cli
; load our GDT
  call install_gdt
;  sti            ; enable interrupts
  ; go into protected mode
  mov eax, cr0 ; move the old cr0 to eax
  or  eax, 1   ; set bit 0 of eax
  mov cr0, eax ; mov eax back to cr0 (enable protected mode)

  ; we're now in protected mode, so we must perform a far jump to set cs to the
  ; correct code segment descriptor as we defined below
  jmp fword 0x08:(START_LINEAR_ADDRESS + stage3)

; Stage 3 of our boot loader
;   We're in protected mode!  Don't enable interrupts yet
stage3:
use32 ; we're in 32 bit mode here
  mov ax, 0x10 ; set segment registers to data selector
  mov ds, ax
  mov ss, ax
  mov es, ax
  mov esp, 0x90000  ; set up our stack to start at 0x90000

  mov edi, VRAM_LINEAR_ADDRESS + (0xa0 * 10); load the address of video ram into edi
  mov esi, START_LINEAR_ADDRESS + PM_Sig ; load the signiture
  xor ebx, ebx      ; ebx is our array index
  cld
.print_msg:
  lodsb             ; load a byte from ds:esi into al and increment esi
  cmp al, 0 ; are we done?
  je .done
  mov byte [edi + ebx * 2], al
  mov byte [edi + ebx * 2 + 1], 0x1a
  inc ebx
  jmp .print_msg

.done:

; just stop execution
.haltloop:
  cli     ; clear all interrupts and halt the processor
  hlt     ; halt the system
  jmp .haltloop

; global descriptor table
gdt_start: ; Address for the GDT
 
gdt_null: ; Null Segment
  dd 0
  dd 0
 
gdt_code: ; Code segment, read/execute, nonconforming
  dw 0xffff
  dw 0
  db 0
  db 10011010b
  db 11001111b
  db 0
 
gdt_data: ; Data segment, read/write, expand down
  dw 0xffff
  dw 0
  db 0
  db 10010010b
  db 11001111b
  db 0
 
gdt_end: ; Used to calculate the size of the GDT
 
; global descriptor table pointer format
gdt_desc:
.limit   dw 0 ; we'll calculate this at runtime
.address dd 0 ; we'll calculate this at runtime


idt:
.start:
.end:
.desc:
limit   dw 0
address dd 0

; line ending (used in BIOS calls)
CR = 0x0d
LF = 0x0a

; null terminated strings
sys_msgs:
.loading          db 'Loading OS...', CR, LF, 0
.halting          db 'Halting system', CR, LF, 0

a20_msgs:
.enabled_by_default db 'A20 already enabled', CR, LF, 0
.enabled            db 'Enabled A20', CR, LF, 0
.disabled           db 'A20 is Disabled', CR, LF, 0
.trying_fast        db 'Trying fast enable...', CR, LF, 0
.trying_bios        db 'Trying BIOS enable...', CR, LF, 0
.trying_kbc         db 'Trying keyboard controller...', CR, LF, 0
.failed_to_enable   db 'Failed to enable a20.', CR, LF, 0

PM_Sig: db 'Protected Mode!', 0

times (18*512)-($-$$) db 0